{
	"version": "https://jsonfeed.org/version/1",
	"title": "William Benton",
	"icon": "https://cdn.micro.blog/willb/avatar.jpg",
	"home_page_url": "https://mu.willb.io/",
	"feed_url": "https://mu.willb.io/feed.json",
	"items": [
		
			{
				"id": "http://willb.micro.blog/2025/10/06/consumption-carcass/",
				
				"content_html": "<p>consumption carcass</p>\n<img src=\"uploads/2025/3ba41268d079461ba11e17681758fa2e.jpg\" width=\"600\" height=\"399\" alt=\"\">\n",
				"content_text": "consumption carcass\n\n<img src=\"uploads/2025/3ba41268d079461ba11e17681758fa2e.jpg\" width=\"600\" height=\"399\" alt=\"\">\n",
				"date_published": "2025-10-06T08:45:09-05:00",
				"url": "https://mu.willb.io/2025/10/06/consumption-carcass/"
			},
			{
				"id": "http://willb.micro.blog/2025/10/02/inside-an-electric-violin-laowa/",
				
				"content_html": "<p>inside an electric violin (Laowa probe lens, focus-stacked)</p>\n<img src=\"uploads/2025/8cd09d275a6d44a4811b189d76d95fa1.jpg\" width=\"600\" height=\"400\" alt=\"\">\n",
				"content_text": "inside an electric violin (Laowa probe lens, focus-stacked)\n\n<img src=\"uploads/2025/8cd09d275a6d44a4811b189d76d95fa1.jpg\" width=\"600\" height=\"400\" alt=\"\">\n",
				"date_published": "2025-10-02T12:01:54-05:00",
				"url": "https://mu.willb.io/2025/10/02/inside-an-electric-violin-laowa/",
				"tags": ["photo"]
			},
			{
				"id": "http://willb.micro.blog/2025/10/01/a-worrying-indicator-of-the/",
				"title": "A worrying indicator of the decline of the open web",
				"content_html": "<p>I&rsquo;ve recently learned of several excellent and relatively new technical and research blogs that appear to be published with static site generators.  On the surface, it is encouraging that talented communicators have not completely abandoned blogging as a (lowercase) medium in favor of the Mediums and Substacks of the contemporary internet.</p>\n<p>The troubling detail I&rsquo;ve noticed, however, is that very few of these sites are configured to also expose an RSS feed — so the primary way to find out about new posts is to follow the author on a social media site and watch for links.</p>\n",
				"content_text": "I've recently learned of several excellent and relatively new technical and research blogs that appear to be published with static site generators.  On the surface, it is encouraging that talented communicators have not completely abandoned blogging as a (lowercase) medium in favor of the Mediums and Substacks of the contemporary internet.\n\nThe troubling detail I've noticed, however, is that very few of these sites are configured to also expose an RSS feed — so the primary way to find out about new posts is to follow the author on a social media site and watch for links.\n",
				"date_published": "2025-10-01T07:14:05-05:00",
				"url": "https://mu.willb.io/2025/10/01/a-worrying-indicator-of-the/"
			},
			{
				"id": "http://willb.micro.blog/2021/06/17/the-context-behind-algorithmic-playlists/",
				"title": "The context behind algorithmic playlists",
				"content_html": "<p><img src=\"https://mu.willb.io/uploads/2021/b93452c384.png\" alt=\"Spotify&rsquo;s &ldquo;daily mixes&rdquo; for a given listener\"></p>\n<p>I don&rsquo;t always listen to my Spotify &ldquo;daily mixes,&rdquo; which are algorithmically-generated playlists covering the constellation around a genre, but on most days at least one of mine is devoted to early music.</p>\n<p>I was listening to one such playlist the other night and noticed <a href=\"https://en.wikipedia.org/wiki/Claudin_de_Sermisy\">Claudin de Sermisy</a>&rsquo;s <a href=\"https://open.spotify.com/track/5OLwvx0O2V4D0KMzrMsuV2?si=4d04230cb59d4831\">&ldquo;Tant que vivray&rdquo;</a>.  I&rsquo;ve noticed in the past that this piece comes up often in algorithmic playlists — it&rsquo;s almost always in my early music playlists — and suspect that its popularity on streaming services is due to its place in the <a href=\"https://wwnorton.com/books/9780393936889\"><em>Norton Recorded Anthology of Western Music</em></a>.</p>\n<p>Since nearly every American who has taken undergraduate music history in the last forty years has studied this piece, it&rsquo;s not surprising that automated recommendations favor &ldquo;Tant que vivray,&rdquo; especially since these students first encountered it  at a crucial point in the term:  the later French Renaissance is dramatically more accessible to contemporary ears than most of the western art music that preceded it.  However, it&rsquo;s possible to improve on even a great original: Miguel de Fuenllana&rsquo;s <a href=\"https://open.spotify.com/track/5UflyKyIgrebyPwbTYpU2n?si=fa4a043032444af9\"> intabulation of &ldquo;Tant que vivray&rdquo; for vihuela</a> is a beautiful consequence of Sermisy&rsquo;s chansons reaching Spain.</p>\n<!-- One of the most interesting aspects of studying Renaissance music was seeing how regional styles spread across Europe.  \"Tant que vivray\" was written in a genre derived from the Italian frottola, and Sermisy's music enjoyed wide distribution throughout Europe in his lifetime.  Since I love cover versions that improve on the original, -->\n",
				"content_text": "![Spotify's \"daily mixes\" for a given listener](https://mu.willb.io/uploads/2021/b93452c384.png)\n\nI don't always listen to my Spotify \"daily mixes,\" which are algorithmically-generated playlists covering the constellation around a genre, but on most days at least one of mine is devoted to early music.\n\nI was listening to one such playlist the other night and noticed <a href=\"https://en.wikipedia.org/wiki/Claudin_de_Sermisy\">Claudin de Sermisy</a>'s <a href=\"https://open.spotify.com/track/5OLwvx0O2V4D0KMzrMsuV2?si=4d04230cb59d4831\">\"Tant que vivray\"</a>.  I've noticed in the past that this piece comes up often in algorithmic playlists — it's almost always in my early music playlists — and suspect that its popularity on streaming services is due to its place in the <a href=\"https://wwnorton.com/books/9780393936889\"><em>Norton Recorded Anthology of Western Music</em></a>. \n\nSince nearly every American who has taken undergraduate music history in the last forty years has studied this piece, it's not surprising that automated recommendations favor \"Tant que vivray,\" especially since these students first encountered it  at a crucial point in the term:  the later French Renaissance is dramatically more accessible to contemporary ears than most of the western art music that preceded it.  However, it's possible to improve on even a great original: Miguel de Fuenllana's <a href=\"https://open.spotify.com/track/5UflyKyIgrebyPwbTYpU2n?si=fa4a043032444af9\"> intabulation of \"Tant que vivray\" for vihuela</a> is a beautiful consequence of Sermisy's chansons reaching Spain.\n\n<!-- One of the most interesting aspects of studying Renaissance music was seeing how regional styles spread across Europe.  \"Tant que vivray\" was written in a genre derived from the Italian frottola, and Sermisy's music enjoyed wide distribution throughout Europe in his lifetime.  Since I love cover versions that improve on the original, -->\n",
				"date_published": "2021-06-17T20:14:00-05:00",
				"url": "https://mu.willb.io/2021/06/17/the-context-behind-algorithmic-playlists/"
			},
			{
				"id": "http://willb.micro.blog/2021/01/10/quiet-on-state-street/",
				
				"content_html": "<p>quiet on State Street</p>\n<img src=\"uploads/2021/f9732e6a9c.jpg\">\n",
				"content_text": "quiet on State Street\n\n<img src=\"uploads/2021/f9732e6a9c.jpg\">\n",
				"date_published": "2021-01-10T23:27:00-05:00",
				"url": "https://mu.willb.io/2021/01/10/quiet-on-state-street/",
				"tags": ["photo"]
			},
			{
				"id": "http://willb.micro.blog/2020/08/21/when-to-leave-the-room/",
				"title": "When to leave the room",
				"content_html": "<p>Feynman&rsquo;s quip &ldquo;if you&rsquo;re the smartest person in the room, you&rsquo;re in the wrong room&rdquo; is well-known, but my friend Erik Erlandson recently <a href=\"https://twitter.com/manyangled/status/1295698284506357761\">glossed it and made me chuckle</a>:</p>\n<blockquote>\n<p>Every finite set has a maximum, so someone is <em>always</em> in the wrong room 😬</p>\n</blockquote>\n<p>As an enthusiastic observer of human social dynamics, I don&rsquo;t have a problem maintaining a high degree of confidence that, in general and for any given room, at least <em>someone</em> shouldn&rsquo;t be there.  But as someone who spent more than a few years of his youth thinking about how best to model things with lattices and semilattices, my immediate reaction was that Erik&rsquo;s claim is only true if the relevant ordering is total, and it&rsquo;s not obvious that every possible pair of humans is directly comparable by the &ldquo;smarter-than&rdquo; relation.</p>\n<p>More fundamentally, though, it seems like looking at the problem of when to leave a room from the perspective of a &ldquo;smarter-than&rdquo; relation is the wrong model:  people in a room can have complementary gifts and aptitudes.  You may know more about historical performance practice for preclassical opera buffa than your friend Alice does, and Alice may know more about manual joinery than you do.  If your goal is to build an authentic theatre dedicated to Pergolesi, you&rsquo;d better both stay in the room.</p>\n<p>For real humans in real situations, a better question is whether or not a given room offers one sufficient opportunity to exploit one&rsquo;s strengths, improve upon one&rsquo;s weaknesses, and benefit from at least someone else in the room while making the whole room better than the sum of the individuals therein.  Engineers in particular are tempted to self-evaluate based on some perceived total ordering of intrinsic worth, but a good leader will redirect this impulse &ndash; instead of &ldquo;How close am I to being the smartest person in this room?&rdquo; you should ask two related questions: &ldquo;Am I having a positive impact on this room?&rdquo; and &ldquo;is being in this room having a positive impact on me?&rdquo;</p>\n<p>No matter who&rsquo;s &ldquo;smartest,&rdquo; there is almost always something for you to learn from the other people in the room.  Make it your goal to find it before you decide you need to leave.</p>\n",
				"content_text": "Feynman's quip \"if you're the smartest person in the room, you're in the wrong room\" is well-known, but my friend Erik Erlandson recently [glossed it and made me chuckle](https://twitter.com/manyangled/status/1295698284506357761):\n\n> Every finite set has a maximum, so someone is _always_ in the wrong room 😬\n\nAs an enthusiastic observer of human social dynamics, I don't have a problem maintaining a high degree of confidence that, in general and for any given room, at least _someone_ shouldn't be there.  But as someone who spent more than a few years of his youth thinking about how best to model things with lattices and semilattices, my immediate reaction was that Erik's claim is only true if the relevant ordering is total, and it's not obvious that every possible pair of humans is directly comparable by the \"smarter-than\" relation.\n\nMore fundamentally, though, it seems like looking at the problem of when to leave a room from the perspective of a \"smarter-than\" relation is the wrong model:  people in a room can have complementary gifts and aptitudes.  You may know more about historical performance practice for preclassical opera buffa than your friend Alice does, and Alice may know more about manual joinery than you do.  If your goal is to build an authentic theatre dedicated to Pergolesi, you'd better both stay in the room.\n\nFor real humans in real situations, a better question is whether or not a given room offers one sufficient opportunity to exploit one's strengths, improve upon one's weaknesses, and benefit from at least someone else in the room while making the whole room better than the sum of the individuals therein.  Engineers in particular are tempted to self-evaluate based on some perceived total ordering of intrinsic worth, but a good leader will redirect this impulse -- instead of \"How close am I to being the smartest person in this room?\" you should ask two related questions: \"Am I having a positive impact on this room?\" and \"is being in this room having a positive impact on me?\"\n\nNo matter who's \"smartest,\" there is almost always something for you to learn from the other people in the room.  Make it your goal to find it before you decide you need to leave.\n",
				"date_published": "2020-08-21T08:45:41-05:00",
				"url": "https://mu.willb.io/2020/08/21/when-to-leave-the-room/"
			},
			{
				"id": "http://willb.micro.blog/2019/09/13/syntax-trees-apis-templates-and/",
				"title": "Syntax trees, APIs, templates, and languages",
				"content_html": "<p>My old pal Tim St. Clair <a href=\"https://twitter.com/timothysc/status/1172143908622614528\">recently lamented about the state of configuration languages</a> on Twitter:</p>\n<blockquote>\n<p>The world desperately needs a configuration language that isn&rsquo;t YAML or JSON.  Something that is &ldquo;expressive enough&rdquo; yet &ldquo;simple enough&rdquo;.  That balance is super hard.</p>\n</blockquote>\n<p>Since thinking about the semantics of configuration systems and languages is a <a href=\"https://dl.acm.org/citation.cfm?id=2063362\">longstanding</a> <a href=\"https://twitter.com/willb/status/1075918123231002624?s=20\">hobby</a> of mine, <a href=\"https://twitter.com/willb/status/1172166934932205574\">I chimed in</a>:</p>\n<blockquote>\n<p>Part of the problem is endemic confusion over what constitutes a “language” — at best, YAML and JSON are human-readable serialization formats for abstract syntax trees.</p>\n<p>So many extant DSL designs clearly start and end with AST serialization, never getting to semantics or UX.</p>\n</blockquote>\n<p>Which led to a <a href=\"https://twitter.com/justinmbarrick/status/1172365597918683138\">great question from Justin Taylor-Berrick</a>:</p>\n<blockquote>\n<p>Is the problem, then, that YAML and JSON are poor ASTs? The configuration languages all build up from data and add their features, rather than us agreeing on an AST between human friendly languages and data? Maybe we are missing an abstraction layer.</p>\n</blockquote>\n<p>I can&rsquo;t answer Justin properly in a Tweet, so I&rsquo;m doing it here.</p>\n<p>I really like the way Justin notes that starting with a serialization format and adding some ad hoc operations isn&rsquo;t ideal:  this results in &ldquo;languages&rdquo; that are adequate at representing the data they&rsquo;re supposed to manipulate but probably aren&rsquo;t as good at expressing the operations we&rsquo;d like to perform on that data as they could be, to say nothing of establishing any guarantees about the transformations we&rsquo;re performing or providing a predictable and consistent developer experience.<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup></p>\n<p>In the case of Kubernetes in particular, &ldquo;configuration languages&rdquo; generally don&rsquo;t do much beyond specifying API objects (sometimes parameterized at configuration time) that should or should not exist.  This is actually not as bad as it sounds, given how Kubernetes works! (In general, you could do worse than using an established API as a starting point for a DSL.)  But it would be better to provide higher-level query, coordination, and templating operations over these, and that&rsquo;s where the complexity comes in.</p>\n<p>A serious problem with the approach of starting with API objects and adding templating is that templating languages are <em>extraordinarily difficult</em> to get right.  Existing templating facilities are often full of usability pitfalls because they have grown organically to satisfy certain applications.  This sort of language evolution leads to many corner cases and inconsistencies.  (Consider, for example, whether anyone could reliably document the semantics of PHP, or whether you&rsquo;d be more inclined to trust a page-long Scheme program or a page-long Perl script.)</p>\n<p>Syntax, whether concrete or abstract, isn’t the most interesting or difficult part of DSL (or language) design, but it is the part that invites the most bikeshedding.  Most designers of YAML- or JSON-based &ldquo;DSLs&rdquo; seem to have put some thought into what the nouns should be called and into what files should look like in their editors but not into what things should mean or do.  This is great if one&rsquo;s goal is to design a language that one will enjoy seeing in an editor window, to the extent that one can enjoy looking at serialized nested lists and dictionaries in an editor window, but it is less great if one&rsquo;s goal is to design a language that will not confuse its users.</p>\n<p>Amateur language designers often think about incidental features of how they like languages <em>to look</em> and enjoy combining these incidental features in a novel way.  Starting with an AST (and using a textual serialization format) means that they don&rsquo;t have to develop a lexer or parser; failing to design the language beyond the AST means that the language is essentially a way to construct API objects (whether the API is for the system being configured or for the configuration system itself).  This provides little value above simply publishing the API, but can potentially introduce usability headaches if, e.g., not every feature of the API is exposed, or if the semantics of iteration or variable-expansion facilities are unclear.</p>\n<p>Flexible configuration is often really <a href=\"https://pdfs.semanticscholar.org/1726/703918e320dff60e013f76fa2a3bd22bc7b8.pdf\">multi-stage programming</a>, and we want a way to check, document, and test our configurations in the same way we check, document, and test our programs.  It would be better to approach configuration by starting with a <a href=\"https://twitter.com/willb/status/1075918123231002624\">lightweight general-purpose programming language</a><sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>, removing unnecessary features almost to the point of austerity, and enriching this core language with built-in functions and literals for API objects from the system to be configured.</p>\n<div class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\">\n<p>For (an intentionally-controversial) example:  I hate XML, but no matter how much one hates XML, one has to acknowledge that the XPath, XQuery, and XSLT tooling is better for document query and manipulation than an ad hoc combination of YAML or JSON and some templating engine designed for the view layer of a web application.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\">\n<p>Almost certainly <em>not</em> a Turing-complete one.&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</div>\n",
				"content_text": "My old pal Tim St. Clair [recently lamented about the state of configuration languages](https://twitter.com/timothysc/status/1172143908622614528) on Twitter:\n\n> The world desperately needs a configuration language that isn't YAML or JSON.  Something that is \"expressive enough\" yet \"simple enough\".  That balance is super hard.\n\nSince thinking about the semantics of configuration systems and languages is a [longstanding](https://dl.acm.org/citation.cfm?id=2063362) [hobby](https://twitter.com/willb/status/1075918123231002624?s=20) of mine, [I chimed in](https://twitter.com/willb/status/1172166934932205574):\n\n> Part of the problem is endemic confusion over what constitutes a “language” — at best, YAML and JSON are human-readable serialization formats for abstract syntax trees. \n> \n> So many extant DSL designs clearly start and end with AST serialization, never getting to semantics or UX.\n\nWhich led to a [great question from Justin Taylor-Berrick](https://twitter.com/justinmbarrick/status/1172365597918683138):\n\n> Is the problem, then, that YAML and JSON are poor ASTs? The configuration languages all build up from data and add their features, rather than us agreeing on an AST between human friendly languages and data? Maybe we are missing an abstraction layer.\n\nI can't answer Justin properly in a Tweet, so I'm doing it here.\n\nI really like the way Justin notes that starting with a serialization format and adding some ad hoc operations isn't ideal:  this results in \"languages\" that are adequate at representing the data they're supposed to manipulate but probably aren't as good at expressing the operations we'd like to perform on that data as they could be, to say nothing of establishing any guarantees about the transformations we're performing or providing a predictable and consistent developer experience.[^xml]\n\nIn the case of Kubernetes in particular, \"configuration languages\" generally don't do much beyond specifying API objects (sometimes parameterized at configuration time) that should or should not exist.  This is actually not as bad as it sounds, given how Kubernetes works! (In general, you could do worse than using an established API as a starting point for a DSL.)  But it would be better to provide higher-level query, coordination, and templating operations over these, and that's where the complexity comes in.\n\nA serious problem with the approach of starting with API objects and adding templating is that templating languages are _extraordinarily difficult_ to get right.  Existing templating facilities are often full of usability pitfalls because they have grown organically to satisfy certain applications.  This sort of language evolution leads to many corner cases and inconsistencies.  (Consider, for example, whether anyone could reliably document the semantics of PHP, or whether you'd be more inclined to trust a page-long Scheme program or a page-long Perl script.)\n\nSyntax, whether concrete or abstract, isn’t the most interesting or difficult part of DSL (or language) design, but it is the part that invites the most bikeshedding.  Most designers of YAML- or JSON-based \"DSLs\" seem to have put some thought into what the nouns should be called and into what files should look like in their editors but not into what things should mean or do.  This is great if one's goal is to design a language that one will enjoy seeing in an editor window, to the extent that one can enjoy looking at serialized nested lists and dictionaries in an editor window, but it is less great if one's goal is to design a language that will not confuse its users.\n\nAmateur language designers often think about incidental features of how they like languages _to look_ and enjoy combining these incidental features in a novel way.  Starting with an AST (and using a textual serialization format) means that they don't have to develop a lexer or parser; failing to design the language beyond the AST means that the language is essentially a way to construct API objects (whether the API is for the system being configured or for the configuration system itself).  This provides little value above simply publishing the API, but can potentially introduce usability headaches if, e.g., not every feature of the API is exposed, or if the semantics of iteration or variable-expansion facilities are unclear.\n\nFlexible configuration is often really [multi-stage programming](https://pdfs.semanticscholar.org/1726/703918e320dff60e013f76fa2a3bd22bc7b8.pdf), and we want a way to check, document, and test our configurations in the same way we check, document, and test our programs.  It would be better to approach configuration by starting with a [lightweight general-purpose programming language](https://twitter.com/willb/status/1075918123231002624)[^tc], removing unnecessary features almost to the point of austerity, and enriching this core language with built-in functions and literals for API objects from the system to be configured.\n\n\n[^xml]: For (an intentionally-controversial) example:  I hate XML, but no matter how much one hates XML, one has to acknowledge that the XPath, XQuery, and XSLT tooling is better for document query and manipulation than an ad hoc combination of YAML or JSON and some templating engine designed for the view layer of a web application.\n\n[^tc]: Almost certainly _not_ a Turing-complete one.\n\n",
				"date_published": "2019-09-13T12:58:52-05:00",
				"url": "https://mu.willb.io/2019/09/13/syntax-trees-apis-templates-and/"
			},
			{
				"id": "http://willb.micro.blog/2019/08/04/sometimes-you-cant-even-improve/",
				"title": "Sometimes you can’t even improve what you do measure ",
				"content_html": "<p>As part of my Sisyphean quest to find a bicycle computer that doesn&rsquo;t make me want to start tracking my rides with an abacus or programmable loom, I recently bought a new Garmin device to replace a deceased old one. The new device is not yet enraging me; it has everything I liked about my old one, plus more, and it also works.</p>\n<p>Part of the &ldquo;more&rdquo; is three new mountain bike metrics.  The most obvious is a screen that pops up and beeps at you whenever you momentarily leave the ground, saying &ldquo;Great Jump!&rdquo; and telling you how long you were in the air, how far you traveled, and how fast you were going at takeoff.  Given my level of mountain bike proficiency, I read &ldquo;Great Jump!&rdquo; as sarcastic every single time.</p>\n<p>The other new metrics are called &ldquo;Grit&rdquo; and &ldquo;Flow.&rdquo;  I&rsquo;d not read the manual before my first ride but I remembered reading that &ldquo;Grit&rdquo; was a measure of the difficulty of the route and &ldquo;Flow&rdquo; was a measure of how well you maintained speed while descending.</p>\n<p>I hit a few loops of smooth singletrack at the ski club and tried to increase my &ldquo;Flow&rdquo; score with each lap.  No matter how much I focused on improving my &ldquo;Flow&rdquo; score — staying loose, breathing slowly, pretending that every instant of pressure on my brakes came from a finite budget — I couldn&rsquo;t get my &ldquo;Flow&rdquo; above five or so for a given lap. I didn&rsquo;t know what five flow meant or if it was any good, but I was confident I could do better.</p>\n<p>When I got home, I read Garmin&rsquo;s description of &ldquo;Flow,&rdquo; which told me two things:</p>\n<ul>\n<li>a &ldquo;Flow&rdquo; score between one and twenty is <em>not bad</em>, but</li>\n<li>a &ldquo;Flow&rdquo; score between zero and one is <em>ideal</em></li>\n</ul>\n<p>Optimizing for the opposite of the right metric  seems worse than the more common problem of optimizing for the wrong metric altogether; it&rsquo;s probably worth looking out for in general.</p>\n",
				"content_text": "As part of my Sisyphean quest to find a bicycle computer that doesn't make me want to start tracking my rides with an abacus or programmable loom, I recently bought a new Garmin device to replace a deceased old one. The new device is not yet enraging me; it has everything I liked about my old one, plus more, and it also works.\n\nPart of the \"more\" is three new mountain bike metrics.  The most obvious is a screen that pops up and beeps at you whenever you momentarily leave the ground, saying \"Great Jump!\" and telling you how long you were in the air, how far you traveled, and how fast you were going at takeoff.  Given my level of mountain bike proficiency, I read \"Great Jump!\" as sarcastic every single time.\n\nThe other new metrics are called \"Grit\" and \"Flow.\"  I'd not read the manual before my first ride but I remembered reading that \"Grit\" was a measure of the difficulty of the route and \"Flow\" was a measure of how well you maintained speed while descending.\n\nI hit a few loops of smooth singletrack at the ski club and tried to increase my \"Flow\" score with each lap.  No matter how much I focused on improving my \"Flow\" score — staying loose, breathing slowly, pretending that every instant of pressure on my brakes came from a finite budget — I couldn't get my \"Flow\" above five or so for a given lap. I didn't know what five flow meant or if it was any good, but I was confident I could do better.\n\nWhen I got home, I read Garmin's description of \"Flow,\" which told me two things:\n\n- a \"Flow\" score between one and twenty is _not bad_, but\n- a \"Flow\" score between zero and one is _ideal_\n\nOptimizing for the opposite of the right metric  seems worse than the more common problem of optimizing for the wrong metric altogether; it's probably worth looking out for in general.\n",
				"date_published": "2019-08-04T16:58:00-05:00",
				"url": "https://mu.willb.io/2019/08/04/sometimes-you-cant-even-improve/"
			},
			{
				"id": "http://willb.micro.blog/2018/12/16/operas-summarized-briefly/",
				"title": "Operas summarized briefly",
				"content_html": "<p><em>Carmen</em> (Bizet, 1875):  Man disregards advice from woman, with grave consequences.<br>\n<em>Orfeo ed Euridice</em> (Gluck, 1762):  Man disregards advice from deity, with grave consequences.<br>\n<em>Der fliegende Holländer</em> (Wagner, 1843):  Woman disregards advice from ghost pirate, with grave consequences.</p>\n<p><em>Così fan tutte</em> (Mozart, 1790):  The composer does not like his wife.<br>\n<em>Fidelio</em> (Beethoven, 1805–14):  The composer likes the idea of having a wife, but would settle for a free and just society.<br>\n<em>Tristan und Isolde</em> (Wagner, 1865):  The composer likes other people&rsquo;s wives.</p>\n<p><em>La Traviata</em> (Verdi, 1853):  All you need is love.<br>\n<em>Pagliacci</em> (Leoncavallo, 1892):  The tears of a clown, when everyone&rsquo;s around.<br>\n<em>Die Zauberflöte</em> (Mozart, 1791):  You say you want a revolution, and your bird can sing.</p>\n<p><em>Rienzi</em> (Wagner, 1840):  The composer would like to make some money in Paris.<br>\n<em>Tannhäuser</em> (Wagner, 1845):  The composer demonstrates that the Twisted Sister/Tipper Gore feud would have had a much larger body count had it occurred in medieval Germany.<br>\n<em>Die Meistersinger von Nürnberg</em> (Wagner, 1868):  The composer thinks you should know that he read your review and it still stings a bit.<br>\n<em>Parsifal</em> (Wagner, 1882):  The composer spent a lot of late nights thinking aloud in his dorm room the semester he took Intro to World Religions.</p>\n<p><em>Falstaff</em> (Verdi, 1893):  It might actually be possible to improve on Shakespeare.<br>\n<em>Roméo et Juliette</em> (Gounod, 1867):  But not like this.<br>\n<em>Das Liebesverbot</em> (Wagner, 1836):  And absolutely not like this.</p>\n<p><em>La nozze di Figaro</em> (Mozart, 1786):  Rich people are terrible.<br>\n<em>Madama Butterfly</em> (Puccini, 1904):  Americans are terrible.<br>\n<em>La Bohème</em> (Puccini, 1896): Infectious diseases are terrible.<br>\n<em>Das Rheingold</em> (Wagner, 1869):  Teutonic deities are terrible.<br>\n<em>Guillaume Tell</em> (Rossini, 1829):  Habsburgs are terrible.<br>\n<em>Die Fledermaus</em> (J. Strauss, 1874):  Operetta is terrible.</p>\n",
				"content_text": "_Carmen_ (Bizet, 1875):  Man disregards advice from woman, with grave consequences.  \n_Orfeo ed Euridice_ (Gluck, 1762):  Man disregards advice from deity, with grave consequences.  \n_Der fliegende Holländer_ (Wagner, 1843):  Woman disregards advice from ghost pirate, with grave consequences.\n\n_Così fan tutte_ (Mozart, 1790):  The composer does not like his wife.  \n_Fidelio_ (Beethoven, 1805–14):  The composer likes the idea of having a wife, but would settle for a free and just society.  \n_Tristan und Isolde_ (Wagner, 1865):  The composer likes other people's wives.\n\n_La Traviata_ (Verdi, 1853):  All you need is love.  \n_Pagliacci_ (Leoncavallo, 1892):  The tears of a clown, when everyone's around.  \n_Die Zauberflöte_ (Mozart, 1791):  You say you want a revolution, and your bird can sing.\n\n_Rienzi_ (Wagner, 1840):  The composer would like to make some money in Paris.  \n_Tannhäuser_ (Wagner, 1845):  The composer demonstrates that the Twisted Sister/Tipper Gore feud would have had a much larger body count had it occurred in medieval Germany.  \n_Die Meistersinger von Nürnberg_ (Wagner, 1868):  The composer thinks you should know that he read your review and it still stings a bit.  \n_Parsifal_ (Wagner, 1882):  The composer spent a lot of late nights thinking aloud in his dorm room the semester he took Intro to World Religions.\n\n_Falstaff_ (Verdi, 1893):  It might actually be possible to improve on Shakespeare.  \n_Roméo et Juliette_ (Gounod, 1867):  But not like this.  \n_Das Liebesverbot_ (Wagner, 1836):  And absolutely not like this.\n\n_La nozze di Figaro_ (Mozart, 1786):  Rich people are terrible.  \n_Madama Butterfly_ (Puccini, 1904):  Americans are terrible.  \n_La Bohème_ (Puccini, 1896): Infectious diseases are terrible.  \n_Das Rheingold_ (Wagner, 1869):  Teutonic deities are terrible.  \n_Guillaume Tell_ (Rossini, 1829):  Habsburgs are terrible.  \n_Die Fledermaus_ (J. Strauss, 1874):  Operetta is terrible.\n",
				"date_published": "2018-12-16T23:36:48-05:00",
				"url": "https://mu.willb.io/2018/12/16/operas-summarized-briefly/"
			},
			{
				"id": "http://willb.micro.blog/2018/07/23/tracing-the-development-of-presentation/",
				"title": "Tracing the development of presentation style",
				"content_html": "<p>For nearly all of my adult life, a large part of my job has involved communicating technical concepts.  I like to imagine that I&rsquo;ve developed a consistent voice, style, and visual language, and I&rsquo;m also inclined to imagine that it has taken me a long time to get here.  I recently needed to look over an old deck and was surprised to note that many elements of my current (and presumably at least somewhat refined) style were present in a talk I gave over a decade ago as a graduate student.</p>\n<p>Here&rsquo;s <a href=\"http://pages.cs.wisc.edu/~willb/dimple/ppdp07-talk.pdf\">the old talk</a>; for comparison, here&rsquo;s <a href=\"https://chapeau.freevariable.com/static/201801/probabilistic-structures.pdf\">a talk I gave this January</a>.  While I&rsquo;m still improving at giving talks and designing visual explanations, I guess things haven&rsquo;t changed as radically as I might have assumed.</p>\n",
				"content_text": "For nearly all of my adult life, a large part of my job has involved communicating technical concepts.  I like to imagine that I've developed a consistent voice, style, and visual language, and I'm also inclined to imagine that it has taken me a long time to get here.  I recently needed to look over an old deck and was surprised to note that many elements of my current (and presumably at least somewhat refined) style were present in a talk I gave over a decade ago as a graduate student.\n\nHere's [the old talk](http://pages.cs.wisc.edu/~willb/dimple/ppdp07-talk.pdf); for comparison, here's [a talk I gave this January](https://chapeau.freevariable.com/static/201801/probabilistic-structures.pdf).  While I'm still improving at giving talks and designing visual explanations, I guess things haven't changed as radically as I might have assumed.\n",
				"date_published": "2018-07-23T20:13:49-05:00",
				"url": "https://mu.willb.io/2018/07/23/tracing-the-development-of-presentation/"
			},
			{
				"id": "http://willb.micro.blog/2018/07/06/the-delights-of-cookbooks/",
				"title": "The delights of cookbooks",
				"content_html": "<p>I was reminded today that the delights of good cookbooks subsist not merely in explaining how to prepare particular dishes of interest but in introducing wonderful things <em>that one didn&rsquo;t even know were of interest</em>.</p>\n<p>This is true of the best technical writing structured around a cookbook metaphor, as well.</p>\n",
				"content_text": "I was reminded today that the delights of good cookbooks subsist not merely in explaining how to prepare particular dishes of interest but in introducing wonderful things <em>that one didn't even know were of interest</em>.  \n\nThis is true of the best technical writing structured around a cookbook metaphor, as well.\n",
				"date_published": "2018-07-06T17:39:29-05:00",
				"url": "https://mu.willb.io/2018/07/06/the-delights-of-cookbooks/"
			}
	]
}
